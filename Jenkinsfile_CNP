#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "darts"
def component = "api"

def branchesToSync = ['demo']

def secrets = [
  'darts-${env}': [
    secret('GovukNotifyTestApiKey', 'GOVUK_NOTIFY_API_KEY'),
    secret('app-insights-connection-string', 'app-insights-connection-string'),
    secret('AzureAdB2CTenantIdKey', 'AAD_B2C_TENANT_ID_KEY'),
    secret('AzureAdB2CClientIdKey', 'AAD_B2C_CLIENT_ID_KEY'),
    secret('AzureAdB2CClientSecretKey', 'AAD_B2C_CLIENT_SECRET_KEY'),
    secret('api-FUNC-TEST-ROPC-USERNAME', 'FUNC_TEST_ROPC_USERNAME'),
    secret('api-FUNC-TEST-ROPC-PASSWORD', 'FUNC_TEST_ROPC_PASSWORD'),
    secret('AzureAdB2CFuncTestROPCClientIdKey', 'AAD_B2C_ROPC_CLIENT_ID_KEY'),
    secret('AzureAdB2CFuncTestROPCClientSecretKey', 'AAD_B2C_ROPC_CLIENT_SECRET_KEY'),
    secret('api-POSTGRES-SCHEMA', 'DARTS_API_DB_SCHEMA'),
    secret('AzureStorageConnectionString', 'AZURE_STORAGE_CONNECTION_STRING')
  ],
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  enableDbMigration(product)
  loadVaultSecrets(secrets)
  enableSlackNotifications('#darts-builds')
  syncBranchesWithMaster(branchesToSync)

  afterAlways('test') {
    builder.gradle('jacocoTestReport')

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "main.html",
      reportName           : "Checkstyle Main Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "test.html",
      reportName           : "Checkstyle Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "functionalTest.html",
      reportName           : "Checkstyle Functional Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "integrationTest.html",
      reportName           : "Checkstyle Integration Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/test",
      reportFiles          : "index.html",
      reportName           : "Unit Tests Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/pmd",
      reportFiles          : "main.html",
      reportName           : "PMD Report"
    ]
  }

  afterFailure('test') {
    junit '**/test-results/integration/*.xml'
  }
}
