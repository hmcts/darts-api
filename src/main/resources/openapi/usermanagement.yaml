openapi: 3.0.1

info:
  title: 'Modernised DARTS'
  description: 'Modernised DARTS (Digital Audio Recording and Transcription Service).'
  version: '${version}'


########################################################################################################################
# PATH DEFINITIONS
########################################################################################################################

paths:
  /users:
    get:
      tags:
        - User
      operationId: getUsers
      parameters:
        - in: query
          name: courthouse
          required: true
          schema:
            $ref: "#/components/schemas/CourthouseId"
      responses:
        '200':
          $ref: '#/components/responses/UserArraySuccessResponseWithIdAndLastLogin'
    post:
      summary: Create new user
      tags:
        - User
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/UserRequest'
      responses:
        '201':
          $ref: '#/components/responses/UserSuccessResponseWithId'
        '400':
          $ref: '#/components/responses/BadUserRequest'
  /users/{id}:
    patch:
      summary: Modify user by id
      tags:
        - User
      operationId: modifyUser
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        $ref: '#/components/requestBodies/UserPatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/UserSuccessResponseWithIdAndLastLogin'
        '400':
          $ref: '#/components/responses/BadUserPatchRequest'
        '404':
          $ref: '#/components/responses/UserNotFound'

  /users/search:
    post:
      summary: Get users by search criteria
      tags:
        - User
      operationId: search
      requestBody:
        $ref: '#/components/requestBodies/UserSearchRequest'
      responses:
        '200':
          $ref: '#/components/responses/UserArraySuccessResponseWithIdAndLastLogin'
        '400':
          description: Bad Request Error
          content:
            application/json+problem:
              schema:
                $ref: './problem.yaml'
              example:
                violations:
                  - field: emailAddress
                    message: size must be between 1 and 256
                type: https://zalando.github.io/problem/constraint-violation
                status: 400
                title: Constraint Violation
        '401':
          description: Unauthorised Error
        '403':
          description: Forbidden Error
          content:
            application/json+problem:
              schema:
                allOf:
                  - $ref: './problem.yaml'
                  - type: object
                    required:
                      - type
                    properties:
                      type:
                        $ref: '#/components/schemas/UserAuthorisation403ErrorCode'
              example:
                type: AUTHORISATION_107
                title: Failed to check authorisation
                status: 403

  /security-groups:
    get:
      summary: Get security groups
      parameters:
        - in: query
          name: courthouse
          schema:
            $ref: "#/components/schemas/CourthouseId"
      tags:
        - SecurityGroup
      responses:
        '200':
          $ref: '#/components/responses/SecurityGroupArraySuccessResponse'
    post:
      summary: Create security group (transcriber groups only)
      tags:
        - SecurityGroup
      requestBody:
        $ref: '#/components/requestBodies/SecurityGroupsRequest'
      responses:
        '201':
          $ref: '#/components/responses/SecurityGroupSuccessResponse'
        '400':
          $ref: '#/components/responses/SecurityGroupBadRequest'


########################################################################################################################
# COMPONENT DEFINITIONS
########################################################################################################################

components:
  requestBodies:
    UserRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UserPatchRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPatch'
    UserSearchRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserSearch'
    SecurityGroupsRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SecurityGroup'

  responses:
    UserSuccessResponseWithId:
      description: 'Success'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserWithId'
    UserSuccessResponseWithIdAndLastLogin:
      description: 'Success'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserWithIdAndLastLogin'
    UserArraySuccessResponseWithIdAndLastLogin:
      description: 'Success'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserWithIdAndLastLogin'
    SecurityGroupArraySuccessResponse:
      description: 'Success'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SecurityGroupWithIdAndRole'
    UserTransferSuccess:
      description: 'Success'
    SecurityGroupSuccessResponse:
      description: 'Success'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SecurityGroupWithIdAndRole'

    BadUserRequest:
      description: Bad Request
      content:
        application/json+problem:
          schema:
            $ref: './problem.yaml'
          example:
            violations:
              - field: "emailAddress"
                message: "must not be null"
              - field: "state"
                message: "must not be null"
              - field: "fullName"
                message: "must not be null"
            type: "https://zalando.github.io/problem/constraint-violation"
            title: "Constraint Violation"
            status: 400
    BadUserPatchRequest:
      description: Bad Request
      content:
        application/json+problem:
          schema:
            $ref: './problem.yaml'
          example:
            violations:
              - field: "fullName"
                message: "size must be between 1 and 256"
            type: "https://zalando.github.io/problem/constraint-violation"
            title: "Constraint Violation"
            status: 400
    UserNotFound:
      description: User not found
      content:
        application/json+problem:
          schema:
            $ref: './problem.yaml'
          example:
            type: "USER_100"
            title: "User not found"
            status: 404
    SecurityGroupBadRequest:
      description: Bad Request
      content:
        application/json+problem:
          schema:
            $ref: './problem.yaml'
          example:
            violations:
              - field: "name"
                message: "must not be null"
              - field: "display_name"
                message: "must not be null"
            type: "https://zalando.github.io/problem/constraint-violation"
            title: "Constraint Violation"
            status: 400

  parameters:
    UserId:
      in: path
      name: id
      required: true
      schema:
        type: integer
    CourthouseId:
      in: query
      name: courthouse
      required: true
      schema:
        $ref: "#/components/schemas/CourthouseId"

  schemas:
    UserId:
      type: integer
    UserName:
      minLength: 1
      maxLength: 256
      pattern: ^\S$|^\S[a-zA-Z '-]*\S$
      type: string
    UserEmailAddress:
      minLength: 1
      maxLength: 256
      type: string
    UserDescription:
      minLength: 1
      maxLength: 256
      type: string
    UserActive:
      type: boolean

    SecurityGroupId:
      type: integer
    SecurityGroupName:
      type: string
      minLength: 1
      maxLength: 256
    SecurityGroupDescription:
      type: string
      minLength: 1
      maxLength: 256
    SecurityGroupDisplayName:
      type: string
      minLength: 1
      maxLength: 256
    SecurityGroupRoleId:
      type: integer
    SecurityGroupGlobalAccess:
      type: boolean
    SecurityGroupDisplayState:
      type: boolean

    CourthouseId:
      type: integer

    User:
      type: object
      properties:
        full_name:
          $ref: '#/components/schemas/UserName'
        email_address:
          $ref: '#/components/schemas/UserEmailAddress'
        description:
          $ref: '#/components/schemas/UserDescription'
        active:
          $ref: '#/components/schemas/UserActive'
        security_groups:
          type: array
          items:
            $ref: '#/components/schemas/SecurityGroupId'
      required:
        - full_name
        - email_address
        - state
    UserPatch:
      type: object
      properties:
        full_name:
          $ref: '#/components/schemas/UserName'
        description:
          $ref: '#/components/schemas/UserDescription'
        active:
          $ref: '#/components/schemas/UserActive'
        security_groups:
          type: array
          items:
            $ref: '#/components/schemas/SecurityGroupId'
    UserSearch:
      type: object
      properties:
        full_name:
          $ref: '#/components/schemas/UserName'
        email_address:
          $ref: '#/components/schemas/UserEmailAddress'
        active:
          $ref: '#/components/schemas/UserActive'
    UserWithId:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
      allOf:
        - $ref: '#/components/schemas/User'
    UserWithIdAndLastLogin:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        last_login:
          type: string
          format: date-time
      allOf:
        - $ref: '#/components/schemas/User'
    UserAuthorisation403ErrorCode:
      type: string
      enum:
        - "AUTHORISATION_107"
      x-enum-varnames: [ BAD_REQUEST_ANY_ID ]

    SecurityGroupWithIdAndRole:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SecurityGroupId'
        role_id:
          $ref: '#/components/schemas/SecurityGroupRoleId'
        global_access:
          $ref: '#/components/schemas/SecurityGroupGlobalAccess'
        display_state:
          $ref: '#/components/schemas/SecurityGroupDisplayState'
      allOf:
        - $ref: '#/components/schemas/SecurityGroup'
    SecurityGroup:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/SecurityGroupName'
        display_name:
          $ref: '#/components/schemas/SecurityGroupDisplayName'
        description:
          $ref: '#/components/schemas/SecurityGroupDescription'
      required:
        - name
        - display_name
