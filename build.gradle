plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.springframework.boot' version '3.0.7'
  id 'org.owasp.dependencycheck' version '8.2.1'
  id 'com.github.ben-manes.versions' version '0.46.0'
  id 'org.sonarqube' version '4.0.0.2929'
  id "io.freefair.lombok" version "8.0.1"
  id "org.openapi.generator" version "6.3.0"
  id "org.flywaydb.flyway" version "9.16.3"
}

group = 'uk.gov.hmcts'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  main {
    java.srcDirs += 'build/generated/openapi/src/main/java'
  }

  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.9.3'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

def sonarExclusions = [
  '**/uk/gov/hmcts/darts/common/entity/**',
  '**/uk/gov/hmcts/darts/**/model/**',
  '**/uk/gov/hmcts/darts/**/config/**',
  '**/uk/gov/hmcts/darts/authentication/util/AuthenticationType.java'
]

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: darts-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:darts-api"
    property "sonar.exclusions", sonarExclusions.join(', ')
    property 'sonar.coverage.exclusions', "**/entity/*,**/dto/*"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.20.0"
}

ext['snakeyaml.version'] = '2.0'
ext['spring-security.version'] = '6.0.3' // https://spring.io/security/cve-2023-20862

task generateDailyListApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
  generatorName = "spring"
  inputSpec = "$rootDir/src/main/resources/openapi/dailyList.yaml".toString()
  outputDir = "$buildDir/generated/openapi".toString()
  apiPackage = "uk.gov.hmcts.darts.dailylist.api"
  modelPackage = "uk.gov.hmcts.darts.dailylist.model"

  skipOperationExample = true
  configOptions = [
    dateLibrary: "java8",
    interfaceOnly: "true",
    useTags: "true"
  ]
}

task generateAudioRequestApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
  generatorName = "spring"
  inputSpec = "$rootDir/src/main/resources/openapi/audioRequest.yaml".toString()
  outputDir = "$buildDir/generated/openapi".toString()
  apiPackage = "uk.gov.hmcts.darts.audiorequest.api"
  modelPackage = "uk.gov.hmcts.darts.audiorequest.model"

  skipOperationExample = true
  configOptions = [
    dateLibrary: "java8",
    interfaceOnly: "true",
    useTags: "true"
  ]
}

task generateEventsAPI(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
  generatorName = "spring"
  inputSpec = "$rootDir/src/main/resources/openapi/event.yaml".toString()
  outputDir = "$buildDir/generated/openapi".toString()
  apiPackage = "uk.gov.hmcts.darts.event.api"
  modelPackage = "uk.gov.hmcts.darts.event.model"

  skipOperationExample = true
  configOptions = [
    dateLibrary: "java8",
    interfaceOnly: "true",
    useTags: "true"
  ]
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'

  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-authorization-server', version: '1.0.2'

  implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
  implementation 'org.apache.commons:commons-collections4:4.4'
  implementation 'commons-validator:commons-validator:1.7'
  implementation 'javax.annotation:javax.annotation-api:1.3.2'
  implementation 'javax.validation:validation-api:2.0.1.Final'
  compileOnly 'javax.servlet:servlet-api:2.5'
  implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.0.2'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'org.apache.commons', name: 'commons-exec', version: '1.3'

  implementation group: 'io.rest-assured', name: 'rest-assured'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: '9.16.3'

  //database
  implementation 'org.postgresql:postgresql:42.6.0'
  runtimeOnly 'org.hsqldb:hsqldb'

  implementation 'uk.gov.service.notify:notifications-java-client:3.19.1-RELEASE'

  testImplementation 'com.h2database:h2:2.1.214'
  testImplementation(platform('org.junit:junit-bom:5.9.2'))
  testImplementation group: 'org.postgresql', name: 'postgresql', version: '42.6.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '4.0.2'

  compileJava.dependsOn = [ 'generateDailyListApi', 'generateEventsAPI', 'generateAudioRequestApi' ]
}

mainClassName = 'uk.gov.hmcts.darts.Application'

bootJar {
  archiveFileName = "darts-api.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
  cleanDisabled = false
}

task cleanPostgresDatabase(type: org.flywaydb.gradle.task.FlywayCleanTask) {
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

migratePostgresDatabase.dependsOn cleanPostgresDatabase
